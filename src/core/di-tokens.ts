/**
 * Dependency Injection Tokens
 *
 * This file contains all DI tokens used throughout the NestShield application.
 * Using Symbol-based tokens ensures type safety and prevents injection collisions.
 */

// Core Configuration Tokens
export const DI_TOKENS = {
  // Core Module Configuration
  SHIELD_MODULE_OPTIONS: Symbol("SHIELD_MODULE_OPTIONS"),
  SHIELD_CONFIG: Symbol("SHIELD_CONFIG"),

  // Storage Layer
  SHIELD_STORAGE: Symbol("SHIELD_STORAGE"),
  STORAGE_ADAPTER: Symbol("STORAGE_ADAPTER"),

  // HTTP Adapters
  HTTP_ADAPTER: Symbol("HTTP_ADAPTER"),
  HTTP_ADAPTER_FACTORY: Symbol("HTTP_ADAPTER_FACTORY"),

  // Core Services
  CIRCUIT_BREAKER_SERVICE: Symbol("CIRCUIT_BREAKER_SERVICE"),
  RATE_LIMIT_SERVICE: Symbol("RATE_LIMIT_SERVICE"),
  THROTTLE_SERVICE: Symbol("THROTTLE_SERVICE"),
  OVERLOAD_SERVICE: Symbol("OVERLOAD_SERVICE"),
  METRICS_SERVICE: Symbol("METRICS_SERVICE"),
  PRIORITY_MANAGER_SERVICE: Symbol("PRIORITY_MANAGER_SERVICE"),
  GRACEFUL_SHUTDOWN_SERVICE: Symbol("GRACEFUL_SHUTDOWN_SERVICE"),
  DISTRIBUTED_SYNC_SERVICE: Symbol("DISTRIBUTED_SYNC_SERVICE"),

  // Anomaly Detection
  ANOMALY_DETECTION_SERVICE: Symbol("ANOMALY_DETECTION_SERVICE"),
  ANOMALY_DETECTION_CONFIG: Symbol("ANOMALY_DETECTION_CONFIG"),
  DETECTOR_FACTORY: Symbol("DETECTOR_FACTORY"),
  DETECTOR_REGISTRY: Symbol("DETECTOR_REGISTRY"),
  ALERTING_SERVICE: Symbol("ALERTING_SERVICE"),
  PERFORMANCE_MONITOR_SERVICE: Symbol("PERFORMANCE_MONITOR_SERVICE"),
  DATA_COLLECTOR_SERVICE: Symbol("DATA_COLLECTOR_SERVICE"),
  DETECTOR_MANAGEMENT_SERVICE: Symbol("DETECTOR_MANAGEMENT_SERVICE"),

  // Anomaly Detectors
  ZSCORE_DETECTOR: Symbol("ZSCORE_DETECTOR"),
  THRESHOLD_DETECTOR: Symbol("THRESHOLD_DETECTOR"),
  STATISTICAL_DETECTOR: Symbol("STATISTICAL_DETECTOR"),
  SEASONAL_DETECTOR: Symbol("SEASONAL_DETECTOR"),
  MACHINE_LEARNING_DETECTOR: Symbol("MACHINE_LEARNING_DETECTOR"),
  ISOLATION_FOREST_DETECTOR: Symbol("ISOLATION_FOREST_DETECTOR"),
  COMPOSITE_DETECTOR: Symbol("COMPOSITE_DETECTOR"),

  // Metrics System
  METRICS_CONFIG: Symbol("METRICS_CONFIG"),
  METRICS_COLLECTOR: Symbol("METRICS_COLLECTOR"),
  METRICS_EXPORTER: Symbol("METRICS_EXPORTER"),
  METRICS_COLLECTOR_FACTORY: Symbol("METRICS_COLLECTOR_FACTORY"),
  METRICS_EXPORTER_FACTORY: Symbol("METRICS_EXPORTER_FACTORY"),

  // Metrics Aggregators
  TIME_WINDOW_AGGREGATOR: Symbol("TIME_WINDOW_AGGREGATOR"),
  ROLLING_WINDOW_AGGREGATOR: Symbol("ROLLING_WINDOW_AGGREGATOR"),
  PERCENTILE_AGGREGATOR: Symbol("PERCENTILE_AGGREGATOR"),

  // Metrics Collectors
  PROMETHEUS_COLLECTOR: Symbol("PROMETHEUS_COLLECTOR"),
  STATSD_COLLECTOR: Symbol("STATSD_COLLECTOR"),
  DATADOG_COLLECTOR: Symbol("DATADOG_COLLECTOR"),
  CLOUDWATCH_COLLECTOR: Symbol("CLOUDWATCH_COLLECTOR"),
  CUSTOM_METRICS_COLLECTOR: Symbol("CUSTOM_METRICS_COLLECTOR"),

  // Metrics Exporters
  PROMETHEUS_EXPORTER: Symbol("PROMETHEUS_EXPORTER"),
  JSON_EXPORTER: Symbol("JSON_EXPORTER"),
  OPENMETRICS_EXPORTER: Symbol("OPENMETRICS_EXPORTER"),

  // Guards and Interceptors
  SHIELD_GUARD: Symbol("SHIELD_GUARD"),
  CIRCUIT_BREAKER_INTERCEPTOR: Symbol("CIRCUIT_BREAKER_INTERCEPTOR"),
  OVERLOAD_RELEASE_INTERCEPTOR: Symbol("OVERLOAD_RELEASE_INTERCEPTOR"),

  // Provider Factories
  PROVIDER_FACTORY: Symbol("PROVIDER_FACTORY"),
  SERVICE_FACTORY: Symbol("SERVICE_FACTORY"),

  // Event System
  EVENT_EMITTER: Symbol("EVENT_EMITTER"),
  EVENT_BUS: Symbol("EVENT_BUS"),

  // Scheduler
  TASK_SCHEDULER: Symbol("TASK_SCHEDULER"),

  // Utility Services
  SHIELD_LOGGER_SERVICE: Symbol("SHIELD_LOGGER_SERVICE"),
  LOGGER: Symbol("LOGGER"),
  HEALTH_CHECK: Symbol("HEALTH_CHECK"),
  DIAGNOSTICS_SERVICE: Symbol("DIAGNOSTICS_SERVICE"),
} as const;

// Type-safe token access
export type DIToken = (typeof DI_TOKENS)[keyof typeof DI_TOKENS];

// Legacy tokens for backward compatibility (deprecated)
export const LEGACY_TOKENS = {
  SHIELD_MODULE_OPTIONS: "SHIELD_MODULE_OPTIONS",
  SHIELD_STORAGE: "SHIELD_STORAGE",
  METRICS_CONFIG: "METRICS_CONFIG",
  METRICS_COLLECTOR: "METRICS_COLLECTOR",
  METRICS_EXPORTER: "METRICS_EXPORTER",
} as const;

// Provider token utilities
export const createProviderToken = (name: string): symbol =>
  Symbol(`PROVIDER_${name.toUpperCase()}`);
export const createServiceToken = (name: string): symbol => Symbol(`SERVICE_${name.toUpperCase()}`);
export const createFactoryToken = (name: string): symbol => Symbol(`FACTORY_${name.toUpperCase()}`);

// Token validation utilities
export const isValidToken = (token: unknown): token is symbol => typeof token === "symbol";
export const getTokenDescription = (token: symbol): string => token.description || "Unknown Token";

// Token groups for easy management
export const TOKEN_GROUPS = {
  CORE: [DI_TOKENS.SHIELD_MODULE_OPTIONS, DI_TOKENS.SHIELD_CONFIG, DI_TOKENS.SHIELD_STORAGE],
  SERVICES: [
    DI_TOKENS.CIRCUIT_BREAKER_SERVICE,
    DI_TOKENS.RATE_LIMIT_SERVICE,
    DI_TOKENS.THROTTLE_SERVICE,
    DI_TOKENS.OVERLOAD_SERVICE,
    DI_TOKENS.METRICS_SERVICE,
    DI_TOKENS.PRIORITY_MANAGER_SERVICE,
    DI_TOKENS.GRACEFUL_SHUTDOWN_SERVICE,
    DI_TOKENS.DISTRIBUTED_SYNC_SERVICE,
  ],
  ANOMALY_DETECTION: [
    DI_TOKENS.ANOMALY_DETECTION_SERVICE,
    DI_TOKENS.ALERTING_SERVICE,
    DI_TOKENS.PERFORMANCE_MONITOR_SERVICE,
    DI_TOKENS.DATA_COLLECTOR_SERVICE,
    DI_TOKENS.DETECTOR_MANAGEMENT_SERVICE,
  ],
  DETECTORS: [
    DI_TOKENS.ZSCORE_DETECTOR,
    DI_TOKENS.THRESHOLD_DETECTOR,
    DI_TOKENS.STATISTICAL_DETECTOR,
    DI_TOKENS.SEASONAL_DETECTOR,
    DI_TOKENS.MACHINE_LEARNING_DETECTOR,
    DI_TOKENS.ISOLATION_FOREST_DETECTOR,
    DI_TOKENS.COMPOSITE_DETECTOR,
  ],
  METRICS: [
    DI_TOKENS.METRICS_CONFIG,
    DI_TOKENS.METRICS_COLLECTOR,
    DI_TOKENS.METRICS_EXPORTER,
    DI_TOKENS.TIME_WINDOW_AGGREGATOR,
    DI_TOKENS.ROLLING_WINDOW_AGGREGATOR,
    DI_TOKENS.PERCENTILE_AGGREGATOR,
  ],
  GUARDS_INTERCEPTORS: [
    DI_TOKENS.SHIELD_GUARD,
    DI_TOKENS.CIRCUIT_BREAKER_INTERCEPTOR,
    DI_TOKENS.OVERLOAD_RELEASE_INTERCEPTOR,
  ],
} as const;
